INSERT INTO scenario (id,app_user_id,description,datasource,DATECREATE, DATELASTMOD)  VALUES (1, 1, 'Personal (Example)', 'SQLCOACH_USER_DS', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);

INSERT INTO scenario_table (scenario_id,scenario_table, DATECREATE, DATELASTMOD)  VALUES (1, 'PERSONAL',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO scenario_table (scenario_id,scenario_table, DATECREATE, DATELASTMOD)  VALUES (1, 'AKTE',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO scenario_table (scenario_id,scenario_table, DATECREATE, DATELASTMOD)  VALUES (1, 'PROJEKT', CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO scenario_table (scenario_id,scenario_table, DATECREATE, DATELASTMOD)  VALUES (1, 'ABTEILUNG',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);


INSERT INTO taskgroup (id, scenario_id, rank, description, DATECREATE, DATELASTMOD)  VALUES (1, 1, S_TASKGROUP.NEXTVAL, 'Einfache Selects',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO taskgroup (id, scenario_id, rank, description, DATECREATE, DATELASTMOD)  VALUES (2, 1, S_TASKGROUP.NEXTVAL, 'Aggregatfunktionen',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO taskgroup (id, scenario_id, rank, description, DATECREATE, DATELASTMOD)  VALUES (3, 1, S_TASKGROUP.NEXTVAL, 'Join Queries',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO taskgroup (id, scenario_id, rank, description, DATECREATE, DATELASTMOD)  VALUES (4, 1, S_TASKGROUP.NEXTVAL, 'Komplexe Queries',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO taskgroup (id, scenario_id, rank, description, DATECREATE, DATELASTMOD)  VALUES (5, 1, S_TASKGROUP.NEXTVAL, 'Subqueries',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO taskgroup (id, scenario_id, rank, description, DATECREATE, DATELASTMOD)  VALUES (6, 1, S_TASKGROUP.NEXTVAL, 'Data Directories',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);


INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (1, 1, S_TASK_RANK.NEXTVAL, 'Geben Sie den Nach- und Vornamen aller Angestellten aufsteigend sortiert aus!', 'select nname, vname from personal order by nname asc',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (2, 1, S_TASK_RANK.NEXTVAL, 'Finden Sie alle alle Angestellten, deren Gehalt zwischen 1500 und 3000 liegt!', 'select * from Personal where Gehalt between 1500 and 3000',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (3, 1, S_TASK_RANK.NEXTVAL, 'Alle Angestellen mit ''ei'' im Nachnamen!', 'SELECT * FROM personal WHERE nname LIKE ''%ei%''',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (4, 1, S_TASK_RANK.NEXTVAL, 'Finde alle mit ''meier'' im Nachnamen!', 'SELECT * FROM personal WHERE UPPER (nname) LIKE ''%MEIER%''',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (5, 1, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Angestellten, deren Nachnamen mehr als 4 Buchstaben hat!', 'SELECT * FROM Personal WHERE nname LIKE ''_____%''',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (6, 1, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Angestellten, die keinen Nachnamen haben!', 'SELECT * FROM Personal WHERE NName IS NULL',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (7, 1, S_TASK_RANK.NEXTVAL, 'Finden sie alle Akteneinträge, die nach 1998 mit einem Gehalt von über 2800 gemacht wurden!', 'select * from akte where datum > ''1997-12-31'' and gehalt > 2800',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (8, 2, S_TASK_RANK.NEXTVAL, 'Wieviel Gehalt wird für alle Angestellten ausbezahlt?', 'SELECT sum(gehalt) gehaltssumme FROM personal',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (9, 2, S_TASK_RANK.NEXTVAL, 'Bestimmen Sie die Anzahl der Mitarbeiter pro Projekt absteigend sortiert nach der Mitarbeiterzahl!', 'SELECT projnr, count(*) as anzahl FROM personal GROUP BY projnr  ORDER BY anzahl',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (10, 2, S_TASK_RANK.NEXTVAL, 'Wie viele Projekte führen die Abteilungen im Mittel aus?', 'SELECT avg(projcnt) Mittlere_Projekt_Anzahl FROM (SELECT count(*) AS projcnt FROM projekt GROUP BY abtnr)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (11, 2, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Telefonnummern, die mehr als 1mal vergeben wurden!', 'SELECT telefonnr, count(*) Anzahl FROM personal  GROUP BY  telefonnr having count(*) > 1',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (12, 2, S_TASK_RANK.NEXTVAL, 'Wieviel Gehalt wird pro Abteilung ausbezahlt? - Sortieren Sie nach der AbtNr - HINWEIS: Es brauchen nur die 	  Abteilungen, die Mitarbeiter haben, ausgegeben werden!', 'SELECT a.abtnr, SUM(gehalt) FROM abteilung a, projekt p, personal pe WHERE a.abtnr = p.abtnr AND p.projnr = pe.projnr GROUP BY a.abtnr',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (13, 2, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Projekte, die mehr als 5 Mitarbeiter haben ODER für ihre Mitarbeiter zusammen mehr als 3000 Euro Gehalt zahlen müssen!', 'SELECT projnr, sum(gehalt) gehalt, count(*)  anzahl FROM personal GROUP BY projnr HAVING count(*) >  5 OR SUM(gehalt) > 3000',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (14, 2, S_TASK_RANK.NEXTVAL, 'Wie viele Mitarbeiter haben die Projekte im Mittel?', 'SELECT AVG(mp) FROM (SELECT COUNT(*) mp FROM Personal GROUP BY projnr)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (15, 3, S_TASK_RANK.NEXTVAL, 'Erstellen Sie eine Telefonliste der Abteilungsleiter mit Abteilungsname, NNamen, VName und Telefonnummer, sortiert nach dem Abteilungsnamen!', 'SELECT DISTINCT abtname, nname, vname, telefonnr FROM Personal p JOIN Abteilung a ON p.persnr = a.persnr ORDER BY abtname',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (16, 3, S_TASK_RANK.NEXTVAL, 'Geben Sie für jeden Angestellten aus: persnr, vname, nname sowie die Akteneinträge sofern vorhanden!', 'Select p.persnr, vname, nname, a.* from personal p left outer join akte a on (p.persnr = a.persnr)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (17, 3, S_TASK_RANK.NEXTVAL, 'Ermitteln Sie die Daten aller Untergebenen von Donald!', 'SELECT  m.* FROM personal m JOIN projekt p ON m.projnr=p.projnr JOIN abteilung a ON p.abtnr = a.abtnr JOIN personal c ON a.persnr = c.persnr WHERE c.vname = ''Donald''',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (18, 3, S_TASK_RANK.NEXTVAL, 'Ermitteln Sie den Chef von Obelix!', 'SELECT c.* FROM personal m JOIN projekt p ON m.projnr=p.projnr JOIN abteilung a ON p.abtnr = a.abtnr JOIN personal c ON a.persnr = c.persnr WHERE m.vname = ''Obelix''',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (19, 3, S_TASK_RANK.NEXTVAL, 'Geben Sie alle 12 Abteilungen aus mit der Anzahl der ihnen zugeordneten Projekte!', 'SELECT a.abtnr, a.abtname, COUNT(projnr) FROM Abteilung a LEFT JOIN Projekt p ON (a.abtnr = p.abtnr) GROUP BY a.abtnr, a.abtname',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (20, 3, S_TASK_RANK.NEXTVAL, 'Geben Sie alle Projekte aus und zu jedem Projekt den Namen des Abteilungsleiters, falls dieser dem Projekt zugeordnet ist!', 'SELECT p.projnr, p.abtnr, vname FROM projekt p JOIN abteilung a ON p.abtnr = a.abtnr LEFT JOIN personal pe ON pe.persnr = a.persnr AND pe.projnr = p.projnr ORDER BY p.projnr',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (21, 3, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Angestellte, deren Gehalt sich um mindestens 1000 seit ihrem ersten Akteneintrag erhöht hat!', 'SELECT DISTINCT a.persnr from Akte a JOIN Akte b ON a.persnr = b.persnr and a.datum < b.datum AND b.gehalt-a.gehalt > 1000',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (22, 4, S_TASK_RANK.NEXTVAL, 'Bestimmen Sie die Abteilungen mit den meisten Projekten, sowie die Anzahl der Projekte!', 'SELECT abtnr, panz FROM (SELECT abtnr, count(*) panz FROM projekt p GROUP BY abtnr) WHERE panz >= ALL (SELECT count(*) FROM projekt p GROUP BY abtnr)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (23, 4, S_TASK_RANK.NEXTVAL, 'Ermitteln Sie die durchschnittliche Anzahl von Projekten pro Abteilung!', 'SELECT avg(panz) FROM (SELECT abtnr, COUNT(*) panz FROM projekt p GROUP BY abtnr)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (24, 4, S_TASK_RANK.NEXTVAL, 'Geben Sie ALLE Angestellten sowie die Anzahl ihrer Akteneinträge aus (Sortiert nach persnr)! ACHTUNG: Nicht alle haben Akteneinträge!', 'SELECT p.persnr, p.nname, p.vname,COUNT(a.persnr) anzahl FROM akte a RIGHT JOIN personal p on a.persnr = p.persnr GROUP BY p.persnr, p.nname, p.vname',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (25, 4, S_TASK_RANK.NEXTVAL, 'Ermitteln Sie alle Angestellte, die Akteneinträge vor dem 1993-01-01 haben, sowie die Anzahl dieser Einträge!', 'SELECT p.persnr, nname, vname, anzahl FROM personal p JOIN (SELECT persnr, count(*) anzahl FROM Akte WHERE datum < ''1993-01-01'' GROUP BY persnr) a ON (p.persnr = a.persnr)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (26, 4, S_TASK_RANK.NEXTVAL, 'Ermitteln Sie die Projekte mit dem höchsten Durchschnittsgehalt der beteiligten Personen!', 'SELECT projnr, avg (gehalt) FROM personal GROUP BY projnr having avg (gehalt) = (select MAX (avggehalt) from ( select AVG (gehalt) avggehalt from personal group by projnr))',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (27, 4, S_TASK_RANK.NEXTVAL, 'Geben Sie für den Angestellten mit der persnr 94 alle Gehaltserhöhungen mit dem jeweiligen Datum aus!', 'SELECT b.gehalt-a.gehalt erhoehung, b.datum FROM Akte a JOIN Akte b ON a.persnr=b.persnr AND a.datum<b.datum WHERE a.persnr=94 AND NOT EXISTS (SELECT datum FROM Akte WHERE persnr=94 AND datum>a.datum AND datum<b.datum)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (28, 5, S_TASK_RANK.NEXTVAL, 'Geben Sie die Personaldaten aller Angestellten aus, die keinen Akteneintrag haben!', 'SELECT * FROM personal WHERE persnr NOT IN (SELECT persnr FROM akte)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (29, 5, S_TASK_RANK.NEXTVAL, 'Geben Sie alle Abteilungen (abtname,budget) nach dem Budget sortiert aus, für die es noch eine weitere gibt, die über das gleiche Budget verfügt!', 'select a.abtname, a.budget from abteilung a where exists (select * from abteilung b where b.budget = a.budget and a.abtnr <> b.abtnr) order by budget',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (30, 5, S_TASK_RANK.NEXTVAL, 'Geben Sie alle Mitarbeiter mit gleichen Namen aus! Verwenden Sie dazu: EXISTS', 'select persnr, nname, vname from personal p where exists ( select * from personal where nname = p.nname and vname = p.vname and persnr <> p.persnr )',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (31, 5, S_TASK_RANK.NEXTVAL, 'Ermitteln Sie den Angestellten mit dem längsten Nachnamen!', 'SELECT nname, length(nname) FROM personal where length(nname) = (SELECT MAX(length(nname)) FROM personal)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (32, 5, S_TASK_RANK.NEXTVAL, 'Geben Sie die Nummern aller Projekte an denen kein Meier mitarbeitet in aufsteigender Reihenfolge aus!', 'SELECT projnr FROM Projekt WHERE projnr NOT IN ( SELECT projnr from Personal WHERE nname = ''Meier'' ) ORDER BY projnr',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (33, 5, S_TASK_RANK.NEXTVAL, 'Geben Sie die Angestellten mit dem geringsten Gehalt aus!', 'select * from personal where gehalt = (select min(gehalt) from personal)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (34, 5, S_TASK_RANK.NEXTVAL, 'Geben Sie den neusten Akteneintrag aus!', 'SELECT * FROM akte WHERE datum=(SELECT MAX(datum) FROM akte)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (35, 5, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Angestellten, die nicht am oberen oder unteren Ende mit ihrem Gehalt liegen!', 'SELECT * FROM Personal WHERE gehalt>(SELECT MIN(gehalt)FROM Personal) AND gehalt<(SELECT MAX(gehalt)FROM Personal)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
INSERT INTO task (id, taskgroup_id, rank, description, query, DATECREATE, DATELASTMOD) VALUES (36, 5, S_TASK_RANK.NEXTVAL, 'Finden Sie alle Angestellten, die überdurchschnittlich viel verdienen!', 'SELECT * FROM Personal WHERE gehalt>(SELECT AVG(gehalt)FROM Personal)',CURRENT_TIMESTAMP, CURRENT_TIMESTAMP);
